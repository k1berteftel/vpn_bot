import datetime

from aiogram.types import CallbackQuery, User, Message
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.api.entities import MediaAttachment
from aiogram_dialog.widgets.kbd import Button, Select
from aiogram_dialog.widgets.input import ManagedTextInput

from database.action_data_class import DataInteraction
from config_data.config import load_config, Config
from states.state_groups import startSG, PaymentSG, VpnSG


config: Config = load_config()


async def start_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    admin = False
    admins = [*config.bot.admin_ids]
    admins.extend([admin.user_id for admin in await session.get_admins()])
    if event_from_user.id in admins:
        admin = True
    text = (f'<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å: {event_from_user.full_name}</b>\n\n<blockquote> - ID: '
            f'<code>{event_from_user.id}</code>\n - –ü–æ–¥–ø–∏—Å–æ–∫: {len(user.vpns) if user.vpns else 0}</blockquote>\n\n')
    retry = 'üåê'
    if user.vpns:
        retry = 'üîÑ–ü—Ä–æ–¥–ª–∏—Ç—å'
    return {
        'text': text,
        'retry': retry,
        'vpn': user.vpns,
        'admin': admin
    }


async def buy_vpn_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    vpns = await session.get_user_vpns(event_from_user.id)
    buttons = []
    for vpn in vpns:
        remained = (vpn.expires_at - datetime.datetime.now()).days
        buttons.append(
            (f'üåê{vpn.name} ({remained}‚åõÔ∏è)', vpn.id)
        )
    return {
        'items': buttons
    }


async def buy_vpn_selector(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    dialog_manager.dialog_data.clear()
    dialog_manager.dialog_data['vpn_id'] = int(item_id)
    await dialog_manager.switch_to(startSG.choose_rate)


async def choose_rate_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    vpn_id = dialog_manager.dialog_data.get('vpn_id')
    if vpn_id:
        vpn = await session.get_vpn_by_id(vpn_id)
        text = (f'<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>\n\n‚åõÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: '
                f'{vpn.expires_at.strftime("%d-%m-%Y %H:%M")}üåê')
    else:
        text = 'üïò–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:'
    return {
        'text': text
    }


async def rate_choose(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    months = int(clb.data.split('_')[0])
    if months == 1:
        price = 299
    elif months == 3:
        price = 699
    else:
        price = 1999
    data = {
        'price': price,
        'months': months
    }
    vpn_id = dialog_manager.dialog_data.get('vpn_id')
    if vpn_id:
        data['vpn_id'] = vpn_id
    await dialog_manager.start(PaymentSG.payment_type, data=data)


async def my_vpns_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    vpns = await session.get_user_vpns(event_from_user.id)
    buttons = []
    vpns_text = ''
    for vpn in vpns:
        vpns_text += f'<b>‚Ä¢ {vpn.name}</b> (–¥–æ {vpn.expires_at.strftime("%d.%m.%Y, %H:%M")})\n'
        buttons.append(
            (f'üîë{vpn.name}', f'{vpn.id}_switch')
        )
        buttons.append(
            (' - ‚úèÔ∏è', f'{vpn.id}_rename')
        )
    return {
        'vpns': vpns_text,
        'items': buttons
    }


async def my_vpn_selector(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    items = item_id.split('_')
    action = items[1]
    vpn_id = int(items[0])
    if action == 'rename':
        dialog_manager.dialog_data['vpn_id'] = vpn_id
        await dialog_manager.switch_to(startSG.get_vpn_name)
        return
    data = {
        'vpn_id': vpn_id
    }
    await dialog_manager.start(VpnSG.menu, data=data)


async def get_vpn_name(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    if len(text) > 10:
        await msg.answer('‚ùóÔ∏è–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è VPN –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    vpn_id = dialog_manager.dialog_data.get('vpn_id')
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    await session.update_vpn_name(vpn_id, text)
    await msg.answer('‚úÖVPN –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω')
    await dialog_manager.switch_to(startSG.my_vpns)


async def ref_menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    text = (f'<b>üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n<code>https://t.me/VezdeLovit_bot?start={event_from_user.id}'
            f'</code>\n\nü§ù –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 50%üò≥ —Å –∏—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü! \n\n'
            f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>\nüë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{user.refs}</b> —á–µ–ª–æ–≤–µ–∫\n'
            f'üí∞–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{user.earn}‚ÇΩ</b>')
    url = f'http://t.me/share/url?url=https://t.me/VezdeLovit_bot?start={event_from_user.id}'
    return {
        'text': text,
        'url': url,
        'earn': bool(user.earn)
    }


async def get_derive_amount(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        amount = int(text)
    except Exception:
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(msg.from_user.id)
    if amount > user.earn:
        await msg.answer('‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ —Ç–æ–π —á—Ç–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å')
        return
    username = msg.from_user.username
    if not username:
        await msg.answer(text='‚ùóÔ∏è–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–Ω–µ–π–º')
        return
    text = (f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
            f'- –ù–∏–∫–Ω–µ–π–º: {user.name}\n - Username: @{user.username}'
            f'\n - Telegram Id: {msg.from_user.id}\n - –†–µ—Ñ–µ—Ä–∞–ª—ã: {user.refs}'
            f'\n - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {user.earn}Ô∏è‚ÇΩ\n - <b>–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>: {amount}‚ÇΩ')
    admin_id = config.bot.admin_ids[1]
    await msg.bot.send_message(
        chat_id=admin_id,
        text=text
    )
    await session.update_user_earn(msg.from_user.id, -amount)
    await msg.answer('‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.ref_menu)

